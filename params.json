{"name":"BBIT/AsyncDispatcherBundle","tagline":"","body":"AsyncDispatcherBundle\r\n=====================\r\n\r\n\r\nAsyncDispatcherBundle is a simple bundle wich provides you with an async event dispatcher, wich will store events untill kernel.terminate, and then fire them using the regular event dispatcher.\r\n\r\n\r\n### Step 1: Download BBITAsyncDispatcherBundle using composer\r\n\r\nAdd BBITAsyncDispatcherBundle in your composer.json:\r\n\r\n```js\r\n{\r\n    \"require\": {\r\n        \"bbit/async-dispatcher-bundle\": \"dev-master\",\r\n    }\r\n}\r\n```\r\n\r\nNow tell composer to download the bundle by running the command:\r\n\r\n``` bash\r\n$ php composer.phar update bbit/async-dispatcher-bundle\r\n```\r\n\r\nComposer will install the bundle to your project's `vendor/BBIT` directory.\r\n\r\n### Step 2: Enable the bundle\r\n\r\nEnable the bundle in the kernel:\r\n\r\n``` php\r\n<?php\r\n// app/AppKernel.php\r\n\r\npublic function registerBundles()\r\n{\r\n    $bundles = array(\r\n        // ...\r\n        new BBIT\\AsyncDispatcherBundle\\BBITAsyncDispatcherBundle(),\r\n    );\r\n}\r\n```\r\n\r\n\r\n### Usage:\r\n\r\n``` php\r\n$dispatcher = $this->container->get('bbit_async_dispatcher.dispatcher'); // get dispatcher service\r\n$dispatcher->addAsyncEvent('name_of_the.event', new CustomEvent($entity));\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}